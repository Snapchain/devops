---
- import_playbook: debian_server_setup_playbook.yml

- name: Setup the server for the op-babylon devnet
  hosts: all
  become: yes

  vars:
    go_version: "1.22.6" # Match optimism/versions.json
    shared_user: snapchain # Ensure this matches the base playbook
    nvm_version: "0.40.1"
    node_version: "20.18.0"
    pnpm_version: "9.12.1"

  tasks:
    # TODO: this will fail if go is not installed
    - name: Check existing Go version
      ansible.builtin.command: /usr/local/go/bin/go version
      register: go_version_check
      ignore_errors: yes
      changed_when: false

    - name: Remove existing Go installation if version mismatch
      ansible.builtin.file:
        path: /usr/local/go
        state: absent
      when: go_version_check.rc != 0 or go_version not in go_version_check.stdout

    - name: Download and install Go if needed
      ansible.builtin.unarchive:
        src: "https://go.dev/dl/go{{ go_version }}.linux-amd64.tar.gz"
        dest: "/usr/local"
        remote_src: yes
      when: go_version_check.rc != 0 or go_version not in go_version_check.stdout

    - name: Set Go environment variables
      ansible.builtin.lineinfile:
        path: "/home/{{ shared_user }}/.zshrc"
        line: "export PATH=$PATH:/usr/local/go/bin"

    - name: Install NVM
      ansible.builtin.shell: >
        sudo -u {{ shared_user }} bash -c 'curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v{{ nvm_version }}/install.sh | bash'
      args:
        creates: "/home/{{ shared_user }}/.nvm/nvm.sh"

    - name: Add NVM to .zshrc
      ansible.builtin.blockinfile:
        path: "/home/{{ shared_user }}/.zshrc"
        block: |
          export NVM_DIR="$([ -z "${XDG_CONFIG_HOME-}" ] && printf %s "${HOME}/.nvm" || printf %s "${XDG_CONFIG_HOME}/nvm")"
          [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh" # This loads nvm
          [ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"  # Optional: bash completion

    # TODO: this step is not idempotent
    - name: Install Node.js using NVM
      ansible.builtin.shell: |
        . /home/{{ shared_user }}/.nvm/nvm.sh
        nvm install {{ node_version }}
        nvm alias default {{ node_version }}
      args:
        executable: /bin/bash

    # TODO: this step is not idempotent
    - name: Install pnpm
      ansible.builtin.shell: |
        curl -fsSL https://get.pnpm.io/install.sh | env PNPM_VERSION={{ pnpm_version }} sh -
      args:
        executable: /bin/bash

    - name: Install Foundry
      ansible.builtin.shell: |
        curl -L https://foundry.paradigm.xyz | sudo -u {{ shared_user }} zsh
        sudo -u {{ shared_user }} zsh -c 'source ~/.zshrc && foundryup'
      args:
        executable: /bin/zsh
        creates: /home/{{ shared_user }}/.foundry/bin/forge

    - name: Install jq
      ansible.builtin.apt:
        name: jq
        state: present

    - name: Install direnv
      ansible.builtin.apt:
        name: direnv
        state: present

    - name: Add direnv hook to .zshrc
      ansible.builtin.lineinfile:
        path: "/home/{{ shared_user }}/.zshrc"
        line: 'eval "$(direnv hook zsh)"'

    # TODO: this step failed with "Failed to set permissions on the temporary files Ansible needs to
    # create when becoming an unprivileged user"
    # - name: Clone Babylon integration deployment repository
    #   ansible.builtin.git:
    #     repo: 'git@github.com:babylonlabs-io/babylon-integration-deployment.git'
    #     dest: '/home/{{ shared_user }}/babylon-integration-deployment'
    #     version: main
    #     accept_hostkey: yes
    #   become_user: "{{ shared_user }}"
