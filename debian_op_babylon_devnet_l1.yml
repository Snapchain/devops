---
- import_playbook: debian_server_setup_playbook.yml

- name: Setup the server for the op-babylon devnet
  hosts: all
  become: yes
  become_flags: -E
  environment:
    PATH: "{{ ansible_env.PATH }}:/home/{{ shared_user }}/.foundry/bin"

  vars:
    # TODO: this Go version requirement is external dependency. we should figure
    # out a way to keep it in sync or use docker to decouple this
    shared_user: snapchain # Ensure this matches the base playbook

  tasks:
    - name: Install Foundryup
      ansible.builtin.shell: |
        sudo -u {{ shared_user }} zsh -c 'curl -L https://foundry.paradigm.xyz | zsh'
      args:
        executable: /bin/zsh
        creates: /home/{{ shared_user }}/.foundry/bin/foundryup

    - name: Check whether the Foundry binaries exist
      stat:
        path: '{{ item }}'
      loop:
        - /home/{{ shared_user }}/.foundry/bin/forge
        - /home/{{ shared_user }}/.foundry/bin/cast
        - /home/{{ shared_user }}/.foundry/bin/anvil
        - /home/{{ shared_user }}/.foundry/bin/chisel
      register: foundry_binaries_stat

    - name: Run Foundryup
      ansible.builtin.shell: |
        sudo -u {{ shared_user }} zsh -c 'foundryup'
      args:
        executable: /bin/zsh
      when: foundry_binaries_stat.results | rejectattr('stat.exists') | list

    - name: Add Foundry to PATH
      ansible.builtin.lineinfile:
        path: "/home/{{ shared_user }}/.zshrc"
        line: "export PATH=$PATH:/home/{{ shared_user }}/.foundry/bin"

    - name: Install more dependencies
      ansible.builtin.apt:
        name:
          - jq
          - yq
        state: present

    # this already initializes the submodules
    - name: Clone babylon OP devnet deployment repository
      ansible.builtin.git:
        repo: "git@github.com:Snapchain/op-chain-deployment.git"
        dest: "/home/{{ shared_user }}/op-chain-deployment"
        version: main
        accept_hostkey: yes

    - name: Copy .env.example to .env
      ansible.builtin.copy:
        src: /home/{{ shared_user }}/op-chain-deployment/.env.example
        dest: /home/{{ shared_user }}/op-chain-deployment/.env
        remote_src: yes
        force: no

    # TODO: this fixes the unsafe directory error (wip)
    # fatal: [34.135.126.163]: FAILED! => {"msg": "Failed to set permissions on the temporary files Ansible needs to create when becoming an unprivileged user (rc: 1, err: chmod: invalid mode: ‘A+user:snapchain:rx:allow’\nTry 'chmod --help' for more information.\n}). For information on working around this, see https://docs.ansible.com/ansible-core/2.17/playbook_guide/playbooks_privilege_escalation.html#risks-of-becoming-an-unprivileged-user"}
    # - name: Set safe directory for git
    #   ansible.builtin.shell: |
    #     git config --global --add safe.directory /home/{{ shared_user }}/babylon-integration-deployment
    #   args:
    #     executable: /bin/bash
    #   become: yes
    #   become_user: "{{ shared_user }}"

    # TODO: we don't need Kurtosis for L2 deployment. only local L1 needs it
    - name: Add Kurtosis repository
      ansible.builtin.apt_repository:
        repo: deb [trusted=yes] https://apt.fury.io/kurtosis-tech/ /
        state: present
        filename: kurtosis

    # TODO: this step is not idempotent
    - name: Update apt cache
      ansible.builtin.apt:
        update_cache: yes

    - name: Install kurtosis-cli
      ansible.builtin.apt:
        name: kurtosis-cli
        state: present

    - name: Verify L1
      ansible.builtin.shell:
        cmd: make l1-verify
        chdir: /home/{{ shared_user }}/op-chain-deployment
      args:
        executable: /bin/zsh
      register: l1_verify_result
      become_user: "{{ shared_user }}"
      failed_when: false
      changed_when: false

    - name: Launch L1
      ansible.builtin.shell:
        cmd: make l1-configure && make l1-launch
        chdir: /home/{{ shared_user }}/op-chain-deployment
      when: l1_verify_result.rc != 0
