---
- import_playbook: debian_server_setup_playbook.yml

- name: Setup the server for the op-babylon devnet
  hosts: all
  become: yes
  become_flags: -E
  environment:
    PATH: "{{ ansible_env.PATH }}:/home/{{ shared_user }}/.foundry/bin"

  vars:
    # TODO: this Go version requirement is external dependency. we should figure
    # out a way to keep it in sync or use docker to decouple this
    go_version: "1.22.6" # Match optimism/versions.json
    shared_user: snapchain # Ensure this matches the base playbook
    nvm_version: "0.40.1"
    node_version: "20.18.0"
    pnpm_version: "9.12.1"
    just_version: "1.34.0"
    foundry_version: "d28a3377e52e6a4114a8cea2903c115b023279e8"

  tasks:
    # TODO: this will fail if go is not installed
    - name: Check existing Go version
      ansible.builtin.command: /usr/local/go/bin/go version
      register: go_version_check
      ignore_errors: yes
      changed_when: false

    - name: Remove existing Go installation if version mismatch
      ansible.builtin.file:
        path: /usr/local/go
        state: absent
      when: go_version_check.rc != 0 or go_version not in go_version_check.stdout

    - name: Download and install Go if needed
      ansible.builtin.unarchive:
        src: "https://go.dev/dl/go{{ go_version }}.linux-amd64.tar.gz"
        dest: "/usr/local"
        remote_src: yes
      when: go_version_check.rc != 0 or go_version not in go_version_check.stdout

    - name: Set Go environment variables
      ansible.builtin.lineinfile:
        path: "/home/{{ shared_user }}/.zshrc"
        line: "export PATH=$PATH:/usr/local/go/bin"

    - name: Install NVM
      ansible.builtin.shell: >
        sudo -u {{ shared_user }} bash -c 'curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v{{ nvm_version }}/install.sh | bash'
      args:
        creates: "/home/{{ shared_user }}/.nvm/nvm.sh"

    # TODO: this step is not idempotent
    - name: Add NVM to .zshrc
      ansible.builtin.blockinfile:
        path: "/home/{{ shared_user }}/.zshrc"
        block: |
          export NVM_DIR="$([ -z "${XDG_CONFIG_HOME-}" ] && printf %s "${HOME}/.nvm" || printf %s "${XDG_CONFIG_HOME}/nvm")"
          [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh" # This loads nvm
          [ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"  # Optional: bash completion

    # TODO: this step is not idempotent
    - name: Install Node.js using NVM
      ansible.builtin.shell: |
        . /home/{{ shared_user }}/.nvm/nvm.sh
        nvm install {{ node_version }}
        nvm alias default {{ node_version }}
      args:
        executable: /bin/bash

    # TODO: this step is not idempotent
    - name: Install pnpm
      ansible.builtin.shell: |
        curl -fsSL https://get.pnpm.io/install.sh | env PNPM_VERSION={{ pnpm_version }} sh -
      args:
        executable: /bin/bash

    - name: Create Foundry directory
      ansible.builtin.file:
        path: "/home/{{ shared_user }}/.foundry/bin"
        state: directory
        owner: "{{ shared_user }}"
        group: "{{ shared_user }}"
        mode: '0755'

    - name: Install Foundry
      ansible.builtin.shell: |
        curl -L https://github.com/foundry-rs/foundry/releases/download/nightly-{{ foundry_version }}/foundry_nightly_linux_amd64.tar.gz | sudo -u {{ shared_user }} tar xvzf - -C /home/{{ shared_user }}/.foundry/bin
      args:
        executable: /bin/zsh
        creates: /home/{{ shared_user }}/.foundry/bin/forge

    - name: Add Foundry to PATH
      ansible.builtin.lineinfile:
        path: "/home/{{ shared_user }}/.zshrc"
        line: "export PATH=$PATH:/home/{{ shared_user }}/.foundry/bin"

    - name: Install more dependencies
      ansible.builtin.apt:
        name:
          - jq
          - yq
          - netcat-openbsd
        state: present

    - name: Install just
      ansible.builtin.shell: |
        curl --proto '=https' --tlsv1.2 -sSf https://just.systems/install.sh | bash -s -- --to /usr/local/bin --tag {{ just_version }}
      args:
        creates: /usr/local/bin/just

    # Q: why is this needed?
    - name: enable SSH forwarding
      lineinfile:
        dest: /etc/sudoers
        insertafter: '^#?\s*Defaults\s+env_keep\b'
        line: 'Defaults    env_keep += "SSH_AUTH_SOCK"'
        state: present

    # this already initializes the submodules
    - name: Clone babylon OP devnet deployment repository
      ansible.builtin.git:
        repo: "git@github.com:Snapchain/op-chain-deployment.git"
        dest: "/home/{{ shared_user }}/op-chain-deployment"
        accept_hostkey: yes

    - name: Copy .env.example to .env
      ansible.builtin.copy:
        src: /home/{{ shared_user }}/op-chain-deployment/.env.example
        dest: /home/{{ shared_user }}/op-chain-deployment/.env
        remote_src: yes
        force: no

    - name: Copy .env.explorer.example to .env.explorer
      ansible.builtin.copy:
        src: /home/{{ shared_user }}/op-chain-deployment/.env.explorer.example
        dest: /home/{{ shared_user }}/op-chain-deployment/.env.explorer
        remote_src: yes
        force: no

    - name: Copy .env.bridge.example to .env.bridge
      ansible.builtin.copy:
        src: /home/{{ shared_user }}/op-chain-deployment/.env.bridge.example
        dest: /home/{{ shared_user }}/op-chain-deployment/.env.bridge
        remote_src: yes
        force: no

    - name: Update .env file with custom values
      ansible.builtin.replace:
        path: /home/{{ shared_user }}/op-chain-deployment/.env
        regexp: "{{ item.regexp }}"
        replace: "{{ item.replace }}"
      loop:
        - { regexp: '^L1_RPC_URL=.*', replace: 'L1_RPC_URL=http://{{ l1_server_ip }}:18545' }
        - { regexp: '^L1_BEACON_URL=.*', replace: 'L1_BEACON_URL=http://{{ l1_server_ip }}:15052' }
        - { regexp: '^L1_CHAIN_ID=.*', replace: 'L1_CHAIN_ID={{ l1_chain_id }}' }
        - { regexp: '^L1_FUNDED_PRIVATE_KEY=.*', replace: 'L1_FUNDED_PRIVATE_KEY={{ l1_pre_funded_account_private_key }}' }

    - name: Update .env.explorer file with custom values
      ansible.builtin.replace:
        path: /home/{{ shared_user }}/op-chain-deployment/.env.explorer
        regexp: "{{ item.regexp }}"
        replace: "{{ item.replace }}"
      loop:
        - { regexp: '^L2_RPC_URL=.*', replace: 'L2_RPC_URL=http://{{ l2_server_ip }}:9545' }
        - { regexp: '^COMMON_HOST=.*', replace: 'COMMON_HOST={{ l2_server_ip }}' }

    # TODO: this fixes the unsafe directory error (wip)
    # fatal: [34.135.126.163]: FAILED! => {"msg": "Failed to set permissions on the temporary files Ansible needs to create when becoming an unprivileged user (rc: 1, err: chmod: invalid mode: ‘A+user:snapchain:rx:allow’\nTry 'chmod --help' for more information.\n}). For information on working around this, see https://docs.ansible.com/ansible-core/2.17/playbook_guide/playbooks_privilege_escalation.html#risks-of-becoming-an-unprivileged-user"}
    # - name: Set safe directory for git
    #   ansible.builtin.shell: |
    #     git config --global --add safe.directory /home/{{ shared_user }}/babylon-integration-deployment
    #   args:
    #     executable: /bin/bash
    #   become: yes
    #   become_user: "{{ shared_user }}"
